
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Domain file automatically generated by the Tarski FSTRIPS writer
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (domain depot)
    (:requirements :typing)
    (:types
        place - object
        locatable - object
        distributor - place
        depot - place
        truck - locatable
        hoist - locatable
        surface - locatable
        crate - surface
        pallet - surface
        object
    )

    (:constants
        
    )

    (:predicates
        (lifting ?x1 - hoist ?x2 - crate)
        (in ?x1 - crate ?x2 - truck)
        (on ?x1 - crate ?x2 - surface)
        (clear ?x1 - surface)
        (available ?x1 - hoist)
        (at ?x1 - locatable ?x2 - place)
    )

    (:functions
        
    )

    

    
    (:action unload_1
     :parameters (?x0 - hoist ?x1 - crate ?x2 - truck ?x3 - place)
     :precondition (and (at ?x0 ?x3) (available ?x0) (in ?x1 ?x2) (at ?x2 ?x3))
     :effect (and
        (lifting ?x0 ?x1)
        (not (available ?x0))
        (not (in ?x1 ?x2)))
    )


    (:action drive_1
     :parameters (?x0 - truck ?x1 - place ?x2 - place)
     :precondition (at ?x0 ?x1)
     :effect (and
        (at ?x0 ?x2)
        (not (at ?x0 ?x1)))
    )


    (:action load_1
     :parameters (?x0 - hoist ?x1 - crate ?x2 - truck ?x3 - place)
     :precondition (and (at ?x0 ?x3) (at ?x2 ?x3) (lifting ?x0 ?x1))
     :effect (and
        (available ?x0)
        (in ?x1 ?x2)
        (not (lifting ?x0 ?x1)))
    )


    (:action lift_1
     :parameters (?x0 - hoist ?x1 - crate ?x2 - surface ?x3 - place)
     :precondition (and (at ?x0 ?x3) (on ?x1 ?x2) (available ?x0) (at ?x1 ?x3) (at ?x2 ?x3) (clear ?x1))
     :effect (and
        (lifting ?x0 ?x1)
        (clear ?x2)
        (not (on ?x1 ?x2))
        (not (at ?x1 ?x3))
        (not (clear ?x1))
        (not (available ?x0)))
    )


    (:action drop_1
     :parameters (?x0 - hoist ?x1 - crate ?x2 - surface ?x3 - place)
     :precondition (and (at ?x0 ?x3) (at ?x2 ?x3) (lifting ?x0 ?x1) (clear ?x2))
     :effect (and
        (on ?x1 ?x2)
        (at ?x1 ?x3)
        (clear ?x1)
        (available ?x0)
        (not (lifting ?x0 ?x1))
        (not (clear ?x2)))
    )

)